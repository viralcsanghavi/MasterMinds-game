import java.util.*;

public class Main {
    public static void main (String[] args) {
        List<String> colorList = new ArrayList<>();
        String[][] currentBoard = new String[10][4];
        String[] masterKey;
        int userChoice = -1;

        colorList.add("Red");
        colorList.add("Blue");
        colorList.add("White");
        colorList.add("Green");
        colorList.add("Black");
        colorList.add("Yellow");

        masterKey = getMasterKey(colorList); // gets random generated masterKey value for user to match to
        
        while (true) {
            Scanner input = new Scanner(System.in);
            printMenu();
            userChoice = input.nextInt();
            try {
                switch (userChoice) {
                    case 1:
                        printRules(input);
                        break;
                    case 2:
                        System.out.println("This is what your board currently looks like.");
                        displayBoard(currentBoard);
                        playGame(colorList, input, masterKey, currentBoard);
                        break;
                    case 3:
                        System.out.println("\nThank you very much for playing MasterMinds. We hope you liked it!");
                        System.exit(0);
                    default:
                        System.out.println("You have chosen an invalid number choice from the menu.");
                }
            }
            catch (InputMismatchException e) {
                System.out.println("You have entered invalid input/entered something besides a number.");
            }
        }
    }
    public static void printMenu () {
        System.out.println("Welcome to MasterMinds! Please enter a number option from one of the choices below.");
        System.out.println("1: Rules");
        System.out.println("2: Play game");
        System.out.println("3: Exit");
    }
    public static void printRules (Scanner input) {
        int newChoice = -1;
        System.out.println("RULES:");
        System.out.println("\nYour objective is simple. You will have 10 turns to attempt to match the same color, order and multiplicity of the 4 pieces in the masterKey generated by the computer.");
        System.out.println("There will be 6 colors to choose from, repetition is allowed, and you are allowed to put from 1 to 4 pieces in any turn if you choose to narrow your doubts further.");
        System.out.println("After you complete each turn, you will be given clues by the computer to let you know at most two things: first, you can be told you have a white piece that means");
        System.out.println("you have a correct color piece on your board for that turn except that it is in the wrong spot as the masterKey; second, you can be told you have a black piece which means");
        System.out.println("you have both the correct color piece on your turn as well as the exact same spot as the masterKey. So, in the end you win if you achieve 4 blacks by the end of turn 10.\n");
        while (newChoice != 1) {
            try {
                System.out.println("If you are done reading the rules, please enter the number 1 to go back to the main menu.");
                newChoice = input.nextInt();
                if (newChoice != 1) {
                    System.out.println("\nYou have entered a number choice besides one.");
                }
            }
            catch (InputMismatchException e) {
                System.out.println("\nYou have entered invalid input/entered something besides a number.");
                input.nextLine();
            }
        }
    }
    public static String[] getMasterKey (List<String> colorList) {
        String[] masterKey = new String[4];
        int randomIndex = 0;
        for (int i = 0; i < 4; ++i) {
            randomIndex = (int) (Math.random() * colorList.size());
            masterKey[i] = colorList.get(randomIndex);
        }
        return masterKey;
    }
    public static void displayBoard (String[][] currentBoard) {
        for (String[] strings : currentBoard) {
            for (String string : strings) {
                if (string == null) {
                    System.out.print("X  ");
                }
                else {
                    System.out.print(string + " ");
                }
            }
            System.out.println(); // print new line for next row
        }
    }
    public static HashMap<String, Integer> updateMap (HashMap<String, Integer> map, String colorChoice) {
        if (map.containsKey(colorChoice))
            map.put(colorChoice, map.getOrDefault(colorChoice, 0) + 1);
        else
            map.put(colorChoice, 1);
        return map;
    }
    public static String validateColorChoice (Scanner input, String colorChoice) {
        while (colorChoice.compareTo("Red") != 0 && colorChoice.compareTo("Blue") != 0 && colorChoice.compareTo("Green") != 0 && colorChoice.compareTo("White") != 0 && colorChoice.compareTo("Black") != 0 && colorChoice.compareTo("Yellow") != 0) {
            System.out.println("You have entered an invalid color choice. Make sure to check your spelling also. Reenter your choice now: ");
            input.nextLine();
            colorChoice = input.next();
        }
        return colorChoice;
    }
    public static void playGame (List<String> colorList, Scanner input, String[] masterKey, String[][] currentBoard) {
        String[] currentTurn = new String[4];
        ArrayList<String> hintList = new ArrayList<>();
        HashMap<String, Integer> map = new HashMap<>();
        boolean updated = false;
        int whiteCounter = 0;
        int blackCounter = 0;
        String colorChoice = "";
        int turn = 0;
        System.out.println("\nNow that you have seen an empty board with X's representing the spots for each row/turn you will have to guess the masterKey, you can begin choosing your pieces!");
        for (String s: masterKey) {
            System.out.print(s + " ");
        }
        while (turn < 10) {
            System.out.println("\nThis is turn #" + (turn + 1));
            System.out.println("Enter your first position color choice (options are: Red, Blue, Green, White, Black, Yellow): ");
            colorChoice = input.next();
            colorChoice = validateColorChoice(input, colorChoice);
            updateMap(map, colorChoice);
            currentTurn[0] = colorChoice;
            System.out.println("Enter your second position color choice (options are: Red, Blue, Green, White, Black, Yellow): ");
            colorChoice = input.next();
            colorChoice = validateColorChoice(input, colorChoice);
            updateMap(map, colorChoice);
            currentTurn[1] = colorChoice;
            System.out.println("Enter your third position color choice (options are: Red, Blue, Green, White, Black, Yellow): ");
            colorChoice = input.next();
            colorChoice = validateColorChoice(input, colorChoice);
            updateMap(map, colorChoice);
            currentTurn[2] = colorChoice;
            System.out.println("Enter your fourth position color choice (options are: Red, Blue, Green, White, Black, Yellow): ");
            colorChoice = input.next();
            colorChoice = validateColorChoice(input, colorChoice);
            updateMap(map, colorChoice);
            currentTurn[3] = colorChoice;
            for (int rowCounter = currentBoard.length - 1; rowCounter >= 0; --rowCounter) {
                for (int columnCounter = 0; columnCounter < 4; ++columnCounter) {
                    if (currentBoard[rowCounter][columnCounter] != null) { // skip if current board is updated with turn values
                        break;
                    }
                    else {
                        currentBoard[rowCounter][columnCounter] = currentTurn[columnCounter]; // otherwise update with new values
                        updated = true;
                    }
                }
                if (updated) {
                    updated = false;
                    break; // break outer loop if updated one row already
                }
            }
            int masterKeyIndex = 0;
            for (String color: masterKey) {
                int i = 0;
                if (color.compareTo(currentTurn[masterKeyIndex]) == 0) {
                    ++blackCounter;
                }
                else {
                    while (i < 4) {
                        if (color.compareTo(currentTurn[i]) == 0 && masterKey[i].compareTo(currentTurn[i]) != 0) {
                            if (map.get(color) == 0) {
                                break;
                            }
                            ++whiteCounter;
                            int mapVal = map.get(color);
                            map.put(color, --mapVal);
                            break;
                        }
                        ++i;
                    }
                }
                ++masterKeyIndex;
            }
            hintList.add(blackCounter + " black(s)");
            hintList.add(whiteCounter + " white(s)");
            if (blackCounter == 4) {
                System.out.println("\nCONGRATS! YOU HAVE CORRECTLY CHOSE ALL 4 PIECES IN " + (turn + 1) + " TURN(S) AND HAVE WON THIS GAME OF MASTERMINDS! HAVE A GREAT DAY!");
                System.exit(0);
            }
            blackCounter = 0;
            whiteCounter = 0;
            ++turn;
            System.out.println("\nThis is what your board now looks like.");
            displayBoard(currentBoard);
            System.out.println("\nAnd this is all the combined clues from each turn.");
            int hintListCounter = 0;
            int loopAmount = 0;
            for (int turnCounter = 0; turnCounter < turn; ++turnCounter) {
                System.out.print("Turn " + (turnCounter + 1) + ": ");
                for (; hintListCounter < loopAmount + 2; ++hintListCounter) {
                    System.out.print(hintList.get(hintListCounter) + "; ");
                }
                System.out.println();
                loopAmount = hintListCounter;
            }
            if (turn == 10) {
                System.out.print("\nSorry, but you did not guess the correct color pieces within 10 turns. You can always play again! The correct pieces were: ");
                for (String s: masterKey) {
                    System.out.print(s + " ");
                }
            }
            map.clear();
        }
    }
}
